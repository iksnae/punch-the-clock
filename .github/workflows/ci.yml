name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, '001-mvp-planning' ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ptc_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Build project
      run: npm run build
    
    - name: Run tests
      run: npm run test:ci
      env:
        DB_HOST: localhost
        DB_PORT: 3306
        DB_USER: root
        DB_PASSWORD: root
        DB_NAME: ptc_test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: test
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node-version: [18.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build project
      run: npm run build
    
    - name: Install pkg
      run: npm install -g pkg
    
    - name: Build binary
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          pkg dist/cli.js --targets node18-linux-x64 --output binaries/ptc-linux
        elif [ "$RUNNER_OS" == "macOS" ]; then
          pkg dist/cli.js --targets node18-macos-x64 --output binaries/ptc-macos
        elif [ "$RUNNER_OS" == "Windows" ]; then
          pkg dist/cli.js --targets node18-win-x64 --output binaries/ptc-windows.exe
        fi
    
    - name: Upload binaries
      uses: actions/upload-artifact@v3
      with:
        name: ptc-binary-${{ matrix.os }}
        path: binaries/

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download all binaries
      uses: actions/download-artifact@v3
      with:
        path: ./binaries/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: Release v${{ github.run_number }}
        body: |
          ## PTC - Punch the Clock v${{ github.run_number }}
          
          ### Downloads
          - **Linux**: [ptc-linux](https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/ptc-linux)
          - **macOS**: [ptc-macos](https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/ptc-macos)
          - **Windows**: [ptc-windows.exe](https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/ptc-windows.exe)
          
          ### Installation
          ```bash
          # Download and install binary
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ github.run_number }}/ptc-linux -o ptc
          chmod +x ptc
          sudo mv ptc /usr/local/bin/
          
          # Or install via npm
          npm install -g punch-the-clock
          ```
          
          ### What's New
          - Complete MVP implementation
          - All 25 tasks completed
          - Ready for production use
        files: |
          binaries/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
